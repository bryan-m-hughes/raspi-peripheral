"use strict";
Object.defineProperties(exports, {
  Peripheral: {get: function() {
      return Peripheral;
    }},
  __esModule: {value: true}
});
var $__events__,
    $__raspi_45_board__;
var events = ($__events__ = require("events"), $__events__ && $__events__.__esModule && $__events__ || {default: $__events__}).default;
var board = ($__raspi_45_board__ = require("raspi-board"), $__raspi_45_board__ && $__raspi_45_board__.__esModule && $__raspi_45_board__ || {default: $__raspi_45_board__}).default;
require('../lib/traceur-runtime');
var pins = global.raspiPinUsage = global.raspiPinUsage || {};
var Peripheral = function Peripheral(pin) {
  this.pin = board.getPinNumber(pin);
  this.alive = true;
  if (pins[this.pin]) {
    pins[this.pin].destroy();
  }
  pins[this.pin] = this;
};
($traceurRuntime.createClass)(Peripheral, {destroy: function() {
    this.alive = false;
    delete pins[this.pin];
    this.emit('destroyed');
  }}, {}, events.EventEmitter);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8wIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzciLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3QkE7QUN4QkEsS0FBSyxpQkFBaUIsQUFBQyxDQUFDLE9BQU07WUNBOUIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsdUJBQXdCO0lBQUUsQURBOUIsQ0FBQztBRUF2QixXQUFTLENDQVQsRUFBQyxLQUFJLENEQU8sS0FBRyxBQ0FTLENBQUM7Q0pBeUIsQ0FBQzs7O0VEd0I1QyxPQUFLLEVNeEJaLEVBQUMsYUFBb0IsQ0FBQSxPQUFNLEFBQUMsVUFBa0IsQ0FDdEMsQ0FBQSxjQUFxQix1QkFBMkIsQ0FBQSxjQUFxQixHQUFLLEVBQUMsT0FBTSxhQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VOd0J2RyxNQUFJLEVNekJYLEVBQUMscUJBQW9CLENBQUEsT0FBTSxBQUFDLGVBQWtCLENBQ3RDLENBQUEsc0JBQXFCLCtCQUEyQixDQUFBLHNCQUFxQixHQUFLLEVBQUMsT0FBTSxxQkFBbUIsQ0FEOUQsQUFDK0QsQ0FBQztBTnlCOUcsTUFBTSxBQUFDLENBQUMsd0JBQXVCLENBQUMsQ0FBQztBQUVqQyxBQUFJLEVBQUEsQ0FBQSxJQUFHLEVBQUksQ0FBQSxNQUFLLGNBQWMsRUFBSSxDQUFBLE1BQUssY0FBYyxHQUFLLEdBQUMsQ0FBQztBTzVCNUQsQUFBSSxFQUFBLGFQOEJHLFNBQU0sV0FBUyxDQUNSLEdBQUUsQ0FBRztBQUNmLEtBQUcsSUFBSSxFQUFJLENBQUEsS0FBSSxhQUFhLEFBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQztBQUNsQyxLQUFHLE1BQU0sRUFBSSxLQUFHLENBQUM7QUFDakIsS0FBSSxJQUFHLENBQUUsSUFBRyxJQUFJLENBQUMsQ0FBRztBQUNsQixPQUFHLENBQUUsSUFBRyxJQUFJLENBQUMsUUFBUSxBQUFDLEVBQUMsQ0FBQztFQUMxQjtBQUFBLEFBQ0EsS0FBRyxDQUFFLElBQUcsSUFBSSxDQUFDLEVBQUksS0FBRyxDQUFDO0FPckNlLEFQc0N0QyxDT3RDc0M7QUNBeEMsQUFBQyxlQUFjLFlBQVksQ0FBQyxBQUFDLGNSdUMzQixPQUFNLENBQU4sVUFBTyxBQUFDLENBQUU7QUFDUixPQUFHLE1BQU0sRUFBSSxNQUFJLENBQUM7QUFDbEIsU0FBTyxLQUFHLENBQUUsSUFBRyxJQUFJLENBQUMsQ0FBQztBQUNyQixPQUFHLEtBQUssQUFBQyxDQUFDLFdBQVUsQ0FBQyxDQUFDO0VBQ3hCLE1BYjhCLENBQUEsTUFBSyxhQUFhLENRN0JNO0FSNEN4RCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuQ29weXJpZ2h0IChjKSAyMDEzLTIwMTQgQnJ5YW4gSHVnaGVzIDxicnlhbkB0aGVvcmV0aWNhbGlkZWF0aW9ucy5jb20+IChodHRwOi8vdGhlb3JldGljYWxpZGVhdGlvbnMuY29tKVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgZXZlbnRzIGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgYm9hcmQgZnJvbSAncmFzcGktYm9hcmQnO1xucmVxdWlyZSgnLi4vbGliL3RyYWNldXItcnVudGltZScpO1xuXG52YXIgcGlucyA9IGdsb2JhbC5yYXNwaVBpblVzYWdlID0gZ2xvYmFsLnJhc3BpUGluVXNhZ2UgfHwge307XG5cbmV4cG9ydCBjbGFzcyBQZXJpcGhlcmFsIGV4dGVuZHMgZXZlbnRzLkV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKHBpbikge1xuICAgIHRoaXMucGluID0gYm9hcmQuZ2V0UGluTnVtYmVyKHBpbik7XG4gICAgdGhpcy5hbGl2ZSA9IHRydWU7XG4gICAgaWYgKHBpbnNbdGhpcy5waW5dKSB7XG4gICAgICBwaW5zW3RoaXMucGluXS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHBpbnNbdGhpcy5waW5dID0gdGhpcztcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuYWxpdmUgPSBmYWxzZTtcbiAgICBkZWxldGUgcGluc1t0aGlzLnBpbl07XG4gICAgdGhpcy5lbWl0KCdkZXN0cm95ZWQnKTtcbiAgfVxufVxuIiwiT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZXhwb3J0cywgJF9fcGxhY2Vob2xkZXJfXzApOyIsIntnZXQ6ICRfX3BsYWNlaG9sZGVyX18wfSIsImdldCAkX19wbGFjZWhvbGRlcl9fMCgpIHsgcmV0dXJuICRfX3BsYWNlaG9sZGVyX18xOyB9IiwiX19lc01vZHVsZTogdHJ1ZSIsInt2YWx1ZTogJF9fcGxhY2Vob2xkZXJfXzB9IiwiKCRfX3BsYWNlaG9sZGVyX18wID0gcmVxdWlyZSgkX19wbGFjZWhvbGRlcl9fMSksIFxuICAgICAgICAkX19wbGFjZWhvbGRlcl9fMiAmJiAkX19wbGFjZWhvbGRlcl9fMy5fX2VzTW9kdWxlICYmICRfX3BsYWNlaG9sZGVyX180IHx8IHtkZWZhdWx0OiAkX19wbGFjZWhvbGRlcl9fNX0pIiwidmFyICRfX3BsYWNlaG9sZGVyX18wID0gJF9fcGxhY2Vob2xkZXJfXzEiLCIoJHRyYWNldXJSdW50aW1lLmNyZWF0ZUNsYXNzKSgkX19wbGFjZWhvbGRlcl9fMCwgJF9fcGxhY2Vob2xkZXJfXzEsICRfX3BsYWNlaG9sZGVyX18yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzMpIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9