"use strict";
Object.defineProperties(exports, {
  Peripheral: {get: function() {
      return Peripheral;
    }},
  __esModule: {value: true}
});
var $__events__,
    $__raspi_45_board__;
var events = ($__events__ = require("events"), $__events__ && $__events__.__esModule && $__events__ || {default: $__events__}).default;
var getPinNumber = ($__raspi_45_board__ = require("raspi-board"), $__raspi_45_board__ && $__raspi_45_board__.__esModule && $__raspi_45_board__ || {default: $__raspi_45_board__}).getPinNumber;
require('../lib/traceur-runtime');
var registeredPins = global.raspiPinUsage = global.raspiPinUsage || {};
var Peripheral = function Peripheral(pins) {
  var $__2 = this;
  this.alive = true;
  if (!Array.isArray(pins)) {
    pins = [pins];
  }
  this.pins = [];
  pins.map((function(pin) {
    var pin = getPinNumber(pin);
    $__2.pins.push(pin);
    if (registeredPins[pin]) {
      registeredPins[pin].destroy();
    }
    registeredPins[pin] = $__2;
  }));
};
($traceurRuntime.createClass)(Peripheral, {destroy: function() {
    this.alive = false;
    delete registeredPins[this.pin];
    this.emit('destroyed');
  }}, {}, events.EventEmitter);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8wIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzciLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3QkE7QUN4QkEsS0FBSyxpQkFBaUIsQUFBQyxDQUFDLE9BQU07WUNBOUIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsdUJBQXdCO0lBQUUsQURBOUIsQ0FBQztBRUF2QixXQUFTLENDQVQsRUFBQyxLQUFJLENEQU8sS0FBRyxBQ0FTLENBQUM7Q0pBeUIsQ0FBQzs7O0VEd0I1QyxPQUFLLEVNeEJaLEVBQUMsYUFBb0IsQ0FBQSxPQUFNLEFBQUMsVUFBa0IsQ0FDdEMsQ0FBQSxjQUFxQix1QkFBMkIsQ0FBQSxjQUFxQixHQUFLLEVBQUMsT0FBTSxhQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0VOd0JyRyxhQUFXLEVNekJwQixFQUFDLHFCQUFvQixDQUFBLE9BQU0sQUFBQyxlQUFrQixDQUN0QyxDQUFBLHNCQUFxQiwrQkFBMkIsQ0FBQSxzQkFBcUIsR0FBSyxFQUFDLE9BQU0scUJBQW1CLENBRDlELEFBQytELENBQUM7QU55QjlHLE1BQU0sQUFBQyxDQUFDLHdCQUF1QixDQUFDLENBQUM7QUFFakMsQUFBSSxFQUFBLENBQUEsY0FBYSxFQUFJLENBQUEsTUFBSyxjQUFjLEVBQUksQ0FBQSxNQUFLLGNBQWMsR0FBSyxHQUFDLENBQUM7QU81QnRFLEFBQUksRUFBQSxhUDhCRyxTQUFNLFdBQVMsQ0FDUixJQUFHOztBQUNiLEtBQUcsTUFBTSxFQUFJLEtBQUcsQ0FBQztBQUNqQixLQUFJLENBQUMsS0FBSSxRQUFRLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBRztBQUN4QixPQUFHLEVBQUksRUFBRSxJQUFHLENBQUUsQ0FBQztFQUNqQjtBQUFBLEFBQ0EsS0FBRyxLQUFLLEVBQUksR0FBQyxDQUFDO0FBQ2QsS0FBRyxJQUFJLEFBQUMsRUFBQyxTQUFDLEdBQUUsQ0FBTTtBQUNoQixBQUFJLE1BQUEsQ0FBQSxHQUFFLEVBQUksQ0FBQSxZQUFXLEFBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQztBQUMzQixZQUFRLEtBQUssQUFBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDO0FBQ25CLE9BQUksY0FBYSxDQUFFLEdBQUUsQ0FBQyxDQUFHO0FBQ3ZCLG1CQUFhLENBQUUsR0FBRSxDQUFDLFFBQVEsQUFBQyxFQUFDLENBQUM7SUFDL0I7QUFBQSxBQUNBLGlCQUFhLENBQUUsR0FBRSxDQUFDLE9BQU8sQ0FBQztFQUM1QixFQUFDLENBQUM7QU81Q2tDLEFQbUR4QyxDT25Ed0M7QUNBeEMsQUFBQyxlQUFjLFlBQVksQ0FBQyxBQUFDLGNSOEMzQixPQUFNLENBQU4sVUFBTyxBQUFDLENBQUU7QUFDUixPQUFHLE1BQU0sRUFBSSxNQUFJLENBQUM7QUFDbEIsU0FBTyxlQUFhLENBQUUsSUFBRyxJQUFJLENBQUMsQ0FBQztBQUMvQixPQUFHLEtBQUssQUFBQyxDQUFDLFdBQVUsQ0FBQyxDQUFDO0VBQ3hCLE1BcEI4QixDQUFBLE1BQUssYUFBYSxDUTdCTTtBUm1EeEQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbkNvcHlyaWdodCAoYykgMjAxMy0yMDE0IEJyeWFuIEh1Z2hlcyA8YnJ5YW5AdGhlb3JldGljYWxpZGVhdGlvbnMuY29tPiAoaHR0cDovL3RoZW9yZXRpY2FsaWRlYXRpb25zLmNvbSlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IGV2ZW50cyBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgZ2V0UGluTnVtYmVyIH0gZnJvbSAncmFzcGktYm9hcmQnO1xucmVxdWlyZSgnLi4vbGliL3RyYWNldXItcnVudGltZScpO1xuXG52YXIgcmVnaXN0ZXJlZFBpbnMgPSBnbG9iYWwucmFzcGlQaW5Vc2FnZSA9IGdsb2JhbC5yYXNwaVBpblVzYWdlIHx8IHt9O1xuXG5leHBvcnQgY2xhc3MgUGVyaXBoZXJhbCBleHRlbmRzIGV2ZW50cy5FdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihwaW5zKSB7XG4gICAgdGhpcy5hbGl2ZSA9IHRydWU7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHBpbnMpKSB7XG4gICAgICBwaW5zID0gWyBwaW5zIF07XG4gICAgfVxuICAgIHRoaXMucGlucyA9IFtdO1xuICAgIHBpbnMubWFwKChwaW4pID0+IHtcbiAgICAgIHZhciBwaW4gPSBnZXRQaW5OdW1iZXIocGluKTtcbiAgICAgIHRoaXMucGlucy5wdXNoKHBpbik7XG4gICAgICBpZiAocmVnaXN0ZXJlZFBpbnNbcGluXSkge1xuICAgICAgICByZWdpc3RlcmVkUGluc1twaW5dLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIHJlZ2lzdGVyZWRQaW5zW3Bpbl0gPSB0aGlzO1xuICAgIH0pO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5hbGl2ZSA9IGZhbHNlO1xuICAgIGRlbGV0ZSByZWdpc3RlcmVkUGluc1t0aGlzLnBpbl07XG4gICAgdGhpcy5lbWl0KCdkZXN0cm95ZWQnKTtcbiAgfVxufVxuIiwiT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZXhwb3J0cywgJF9fcGxhY2Vob2xkZXJfXzApOyIsIntnZXQ6ICRfX3BsYWNlaG9sZGVyX18wfSIsImdldCAkX19wbGFjZWhvbGRlcl9fMCgpIHsgcmV0dXJuICRfX3BsYWNlaG9sZGVyX18xOyB9IiwiX19lc01vZHVsZTogdHJ1ZSIsInt2YWx1ZTogJF9fcGxhY2Vob2xkZXJfXzB9IiwiKCRfX3BsYWNlaG9sZGVyX18wID0gcmVxdWlyZSgkX19wbGFjZWhvbGRlcl9fMSksIFxuICAgICAgICAkX19wbGFjZWhvbGRlcl9fMiAmJiAkX19wbGFjZWhvbGRlcl9fMy5fX2VzTW9kdWxlICYmICRfX3BsYWNlaG9sZGVyX180IHx8IHtkZWZhdWx0OiAkX19wbGFjZWhvbGRlcl9fNX0pIiwidmFyICRfX3BsYWNlaG9sZGVyX18wID0gJF9fcGxhY2Vob2xkZXJfXzEiLCIoJHRyYWNldXJSdW50aW1lLmNyZWF0ZUNsYXNzKSgkX19wbGFjZWhvbGRlcl9fMCwgJF9fcGxhY2Vob2xkZXJfXzEsICRfX3BsYWNlaG9sZGVyX18yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzMpIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9